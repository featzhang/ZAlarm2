package cn.zhangzuofeng.tip;

import javax.swing.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class TipDialog extends javax.swing.JDialog {

    public TipDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setUndecorated(true);
        initComponents();
        loadAction();
    }

    public TipDialog(java.awt.Frame parent, boolean modal, TipDataEntity entity) {
        super(parent, modal);
        setUndecorated(true);
        initComponents();
        setEntity(entity);
        loadAction();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iconPanel = new javax.swing.JPanel();
        closeLabel = new javax.swing.JLabel();
        statuePanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        contentArea = new javax.swing.JTextArea();
        titleField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        iconPanel.setOpaque(false);

        closeLabel.setText("X");
        iconPanel.add(closeLabel);

        statuePanel.setOpaque(false);

        javax.swing.GroupLayout statuePanelLayout = new javax.swing.GroupLayout(statuePanel);
        statuePanel.setLayout(statuePanelLayout);
        statuePanelLayout.setHorizontalGroup(
                statuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        statuePanelLayout.setVerticalGroup(
                statuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 20, Short.MAX_VALUE)
        );

        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(null);
        jScrollPane1.setEnabled(false);
        jScrollPane1.setOpaque(false);

        contentArea.setEditable(false);
        contentArea.setColumns(20);
        contentArea.setRows(5);
        contentArea.setBorder(null);
        contentArea.setEnabled(false);
        contentArea.setOpaque(false);
        jScrollPane1.setViewportView(contentArea);

        titleField.setEditable(false);
        titleField.setText("jTextField1");
        titleField.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iconPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(statuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(iconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statuePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TipDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TipDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TipDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TipDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TipDialog dialog = new TipDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel closeLabel;
    private javax.swing.JTextArea contentArea;
    private javax.swing.JPanel iconPanel;
    private javax.swing.JPanel statuePanel;
    private javax.swing.JTextField titleField;
    // End of variables declaration//GEN-END:variables

    public void setEntity(TipDataEntity entity) {
        this.entity = entity;
        if (entity == null) {
            return;
        }
        titleField.setText(entity.getTitle());
        List<TipDialogButtonEntity> buttons = entity.getButtons();
        iconPanel.remove(closeLabel);
        if (buttons != null) {
            for (final TipDialogButtonEntity tipDialogButtonEntity : buttons) {
                JLabel label = new JLabel();
                label.setIcon(tipDialogButtonEntity.getIcon());
                label.setToolTipText(tipDialogButtonEntity.getTooltip());
                label.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent mouseEvent) {
                        tipDialogButtonEntity.getAction().actionPerformance();
                    }
                });
                iconPanel.add(label);
            }
        }
        contentArea.setText(entity.getContent());
        if (entity.getCanBeClosed()) {
            iconPanel.add(closeLabel);
        }
        int timeInt = 30;
        TipDataEntity.SHOW_TIME showTime = entity.getShowTime();
        switch (showTime) {
            case Short:
                timeInt = 30;
                break;
            case Middle:
                timeInt = 60;
                break;
            case Long:
                timeInt = 90;
                break;
        }
        if (timer != null) {
            timer.cancel();
        } else {
            timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    TipDialog.this.dispose();
                    timer.cancel();
                    timer = null;
                }
            }, timeInt * 1000);
        }
    }

    public TipDataEntity getEntity() {
        return entity;
    }

    private TipDataEntity entity;
    private Timer timer;

    private void loadAction() {
        closeLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                TipDialog.this.dispose();
            }
        });
    }

    @Override
    public void dispose() {
        super.dispose();
        if (timer != null) {
            timer.cancel();
        }
    }
}
